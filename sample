package com.tcs.bancs.microservices.service;
import com.tcs.bancs.microservices.enc.utils.SBISFTP;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.util.Scanner;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
public class DecryptionResponse
{
  static String encResponse = new String();
  public static void main(String[] args)
  {
    Scanner sc = new Scanner(System.in);
    System.out.print("Enter AES Key=");
    String accessToken = sc.nextLine();
    System.out.print("\nEnter Encrypted Response file path=\n");
    String encResponsepath = sc.nextLine();
    
    try {
        Files.lines(Paths.get(encResponsepath)).forEach(line -> {
            encResponse += line;            
        });
    } catch (IOException e) {
        System.out.println("Error occurred while fetching the encrypted response file");
    }
        
    try
    {
      String decResponse = SBISFTP.decryptResponse(accessToken, encResponse);
      System.out.println("Decrypted Response>>\n" + decResponse);
    }
    catch (java.security.NoSuchAlgorithmException | InvalidKeyException | NoSuchPaddingException | InvalidAlgorithmParameterException | IllegalStateException | IllegalBlockSizeException | BadPaddingException | IOException e)
    {
      e.printStackTrace();
    }
  }
}
‚≠ê
package com.tcs.bancs.microservices.service;

import com.tcs.bancs.microservices.enc.utils.SBISFTP;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.util.Scanner;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

public class DecryptionResponse {
    public static void main(String[] args) {
        try (Scanner sc = new Scanner(System.in)) {
            // Take AES Key from user
            System.out.print("Enter AES Key: ");
            String accessToken = sc.nextLine();

            // Take Encrypted Response File Path
            System.out.print("\nEnter Encrypted Response file path: ");
            String encResponsePath = sc.nextLine();

            // Read file content into StringBuilder
            StringBuilder encResponse = new StringBuilder();
            try {
                Files.lines(Paths.get(encResponsePath)).forEach(encResponse::append);
            } catch (IOException e) {
                System.err.println("Error occurred while fetching the encrypted response file.");
                e.printStackTrace();
                return;
            }

            // Decrypt the response
            try {
                String decResponse = SBISFTP.decryptResponse(accessToken, encResponse.toString());
                System.out.println("Decrypted Response:\n" + decResponse);
            } catch (java.security.NoSuchAlgorithmException | InvalidKeyException | NoSuchPaddingException |
                     InvalidAlgorithmParameterException | IllegalStateException | IllegalBlockSizeException |
                     BadPaddingException | IOException e) {
                System.err.println("Error occurred while decrypting the response.");
                e.printStackTrace();
            }
        }
    }
}




//    SBI Core Banking Project, Kondapur, Hyderabad, India.       *
//*****************************************************************
//                                                                *
//  	           PROGRAM - OpenBankingServicesApp.Java                *
//                                                                *
//*****************************************************************
//                 P R O G R A M    H I S T O R Y                 *
//                                                                *
//   PROGRAMMER    :    DATE       :  SPR NO   :   COMMENTS       *
//----------------------------------------------------------------*
// Naga Sai Ganesh : 15/10/2024    : 24090001  :  MICROSERVICES   *
// Niharika Tammana: 15/10/2024    : 24090001  :  MICROSERVICES   *
//----------------------------------------------------------------*

package com.tcs.bancs.microservices;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;
//import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

import com.tcs.bancs.microservices.config.CBSDayDbConfig;
import com.tcs.bancs.microservices.config.CBSNightDbConfig;
import com.tcs.bancs.microservices.config.CBSRefDbConfig;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@SpringBootApplication(exclude = { DataSourceAutoConfiguration.class, // HibernateJpaAutoConfiguration.class,
		DataSourceTransactionManagerAutoConfiguration.class }, scanBasePackages = "com.tcs.bancs.microservices")
@ComponentScan(basePackages = { "com.tcs.bancs.microservices", "com.tcs.bancs.microservices.config",
		"com.tcs.bancs.api", "com.tcs.bancs.microservices.interceptor", "com.tcs.bancs.microservices.api",
		"com.tcs.bancs.microservices.model", "com.tcs.bancs.microservices.util", "com.tcs.bancs.microservices",
		"com.tcs.bancs.microservices.impl", "com.tcs.bancs.microservices.repository.day",
		"com.tcs.bancs.microservices.repository.night", "com.tcs.bancs.microservices.repository.ref",
		"com.tcs.bancs.microservices.exception", "com.tcs.bancs.microservices.mappings",
		"com.tcs.bancs.microservices.model" })
@EnableSwagger2
@Import({ CBSDayDbConfig.class, CBSNightDbConfig.class, CBSRefDbConfig.class })
public class OpenBankingServicesApp extends SpringBootServletInitializer {
	private static Logger LOGGER = LoggerFactory.getLogger(OpenBankingServicesApp.class);

	public static void main(String[] args) {

		if (System.getProperty("ChannelsPropConfigPath") == null) {
			LOGGER.info(
					"Path to config property file is not set! Please set the system variable \"ChannelsPropConfigPath\" with the path to the config file.");
			LOGGER.info("Execution Finished with Error!");
		}

		SpringApplication.run(OpenBankingServicesApp.class, args);

	}
	
	
	protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
		return builder.sources(OpenBankingServicesApp.class);
	}

}


public class Main {
    public static void main(String[] args) {
        String decResponse = "123,456,789{abc,def},[1,000,2,000],xyz";
        
        // Split the string while preserving commas between numbers
        // Use negative lookahead (?![0-9]) and negative lookbehind (?<![0-9]) to avoid splitting on commas between digits
        String[] parts = decResponse.split(",(?![0-9])|(?<![0-9]),|[\\{\\}\\[\\]]+");
        
        // Print the result
        for (String part : parts) {
            System.out.println(part);
        }
    }
}


if (StringUtils.isAlpha(opcode)) {
				if (opcode.equals("F") || opcode.equals("M") || opcode.equals("P") || opcode.equals("E")) {






 RunUnit run1 = new RunUnit();
		 try (Connection connection = datasource.getConnection()){
			
	            run1.Add(jvm60457);
 	    		run1.Call("JVM60457", cif_number.get_Reference(), opt_flag.get_Reference(), branch_num.get_Reference(), teller_num.get_Reference(), out_cif_details.get_Reference(), out_account_array.get_Reference(),  out_error_num.get_Reference(), Rec_Area.get_Reference(),connection);
 	    		errno = out_error_num.getJvmOutErrorNo();
		 } catch (SQLException e) {
			 errno = "3293";

		}
		 
			 cif_details = out_cif_details.getJvmOutCifDetails();
			index = 0;
			while (index <= 9999) {
				String account_details = out_account_array.getJvmOutput60457Output(index);
				if (!account_details.trim().isEmpty()) {
					Output_Acc = Output_Acc + account_details;
					index+=1;
				}
				else {
					break;
				}
			}
			  run1.close();




import com.microfocus.cobol.runtime.RunUnit;
import java.sql.Connection;
import java.sql.SQLException;

public class RunUnitMonitor {
    public static void main(String[] args) {
        RunUnit run1 = new RunUnit();
        System.out.println("RunUnit Created: " + run1);  // Print RunUnit reference

        Runtime runtime = Runtime.getRuntime();
        long memoryBefore = runtime.totalMemory() - runtime.freeMemory();
        System.out.println("Memory Before RunUnit Execution: " + memoryBefore + " bytes");

        try (Connection connection = datasource.getConnection()) {
            System.out.println("Database connection established.");

            // Add the COBOL program to the RunUnit
            run1.Add(jvm60457);
            System.out.println("COBOL program added to RunUnit.");

            // Call the COBOL program
            run1.Call("JVM60457", 
                      cif_number.get_Reference(), 
                      opt_flag.get_Reference(), 
                      branch_num.get_Reference(), 
                      teller_num.get_Reference(), 
                      out_cif_details.get_Reference(), 
                      out_account_array.get_Reference(),  
                      out_error_num.get_Reference(), 
                      Rec_Area.get_Reference(), 
                      connection);
            System.out.println("COBOL program executed.");

            errno = out_error_num.getJvmOutErrorNo();
        } catch (SQLException e) {
            errno = "3293";
            System.out.println("SQL Exception occurred: " + e.getMessage());
        }

        // Processing output details
        cif_details = out_cif_details.getJvmOutCifDetails();
        index = 0;
        while (index <= 9999) {
            String account_details = out_account_array.getJvmOutput60457Output(index);
            if (!account_details.trim().isEmpty()) {
                Output_Acc = Output_Acc + account_details;
                index += 1;
            } else {
                break;
            }
        }

        // Closing RunUnit
        run1.close();
        System.out.println("RunUnit closed successfully.");

        // Suggest garbage collection
        run1 = null;
        System.gc();
        System.runFinalization();

        // Check memory after RunUnit execution
        long memoryAfter = runtime.totalMemory() - runtime.freeMemory();
        System.out.println("Memory After RunUnit Execution: " + memoryAfter + " bytes");

        if (memoryAfter > memoryBefore) {
            System.out.println("‚ö†Ô∏è Possible Memory Leak Detected!");
        } else {
            System.out.println("‚úÖ Memory Released Successfully.");
        }
    }
}






import com.microfocus.cobol.runtime.RunUnit;
import java.lang.ref.PhantomReference;
import java.lang.ref.ReferenceQueue;
import java.sql.Connection;
import java.sql.SQLException;

public class RunUnitMonitor {
    private static ReferenceQueue<RunUnit> refQueue = new ReferenceQueue<>();

    static class RunUnitCleaner extends PhantomReference<RunUnit> {
        public RunUnitCleaner(RunUnit run1) {
            super(run1, refQueue);
        }

        public void cleanUp() {
            System.out.println("RunUnit is no longer referenced. Cleaning up...");
        }
    }

    public static void main(String[] args) {
        RunUnit run1 = new RunUnit();
        RunUnitCleaner cleaner = new RunUnitCleaner(run1);
        System.out.println("RunUnit Created: " + run1);

        long memoryBefore = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        System.out.println("Memory Before Execution: " + memoryBefore + " bytes");

        try (Connection connection = datasource.getConnection()) {
            System.out.println("Database connection established.");
            run1.Add(jvm60457);
            run1.Call("JVM60457", 
                      cif_number.get_Reference(), 
                      opt_flag.get_Reference(), 
                      branch_num.get_Reference(), 
                      teller_num.get_Reference(), 
                      out_cif_details.get_Reference(), 
                      out_account_array.get_Reference(),  
                      out_error_num.get_Reference(), 
                      Rec_Area.get_Reference(), 
                      connection);
            System.out.println("COBOL program executed.");
        } catch (SQLException e) {
            System.out.println("SQL Exception: " + e.getMessage());
        }

        // Close RunUnit explicitly
        run1.close();
        System.out.println("RunUnit closed successfully.");

        // Nullify the reference and let the PhantomReference handle cleanup
        run1 = null;

        // Monitor memory after execution
        long memoryAfter = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        System.out.println("Memory After Execution: " + memoryAfter + " bytes");

        // Check for cleanup
        if (refQueue.poll() != null) {
            cleaner.cleanUp();
        }

        if (memoryAfter < memoryBefore) {
            System.out.println("‚úÖ Memory released successfully.");
        } else {
            System.out.println("‚ö†Ô∏è Possible memory leak detected!");
        }
    }
}





public class YONO_Child {
	
	Logger logger = LoggerFactory.getLogger(YONO_Child.class);
	   Connection connection;

	public List<String> callYONOEnquiryChild(String branch_number,  String tellerno, String cifno, String option_flag, DataSource datasource, String commonArea) throws InterruptedException, ExecutionException {
		int index;
		String Output_Acc = "";
		String cif_details;
		String errno;
		   JVM60457 jvm60457 = new JVM60457();
		
		logger.info("VC------------------------YONO Enquiry Child Service Started------------------------VC");
		
		JvmIn60457CifNo     cif_number        = new JvmIn60457CifNo();
		JvmIn60457OptnFlag  opt_flag          = new JvmIn60457OptnFlag();
		JvmInBranchNo       branch_num        = new JvmInBranchNo();
		JvmInTellerNo       teller_num        = new JvmInTellerNo();
		LsRecordArea 		Rec_Area          = new LsRecordArea();
		JvmOutCifDetails    out_cif_details   = new JvmOutCifDetails();
		JvmArrayOutputOut   out_account_array = new JvmArrayOutputOut();
		JvmOutErrorNo       out_error_num     = new JvmOutErrorNo();
         

		
		teller_num.setJvmInTellerNo(String.format("%016d", new BigInteger(tellerno)));
		cif_number.setJvmIn60457CifNo(String.format("%017d", new BigInteger(cifno)));
		opt_flag.setJvmIn60457OptnFlag(option_flag);
		branch_num.setJvmInBranchNo(branch_number);
		Rec_Area.setLsRecordArea(commonArea);
		 RunUnit run1 = new RunUnit();
		
		 System.out.println("RunUnit Created: " + run1);  // Print RunUnit reference

	        Runtime runtime = Runtime.getRuntime();
	        long memoryBefore = runtime.totalMemory() - runtime.freeMemory();
	        System.out.println("Memory Before RunUnit Execution: " + memoryBefore + " bytes");
	       
		 try (Connection connection = datasource.getConnection()){
			
	            run1.Add(jvm60457);
	         
	            System.out.println("COBOL program added to RunUnit.");
	           
 	    		run1.Call("JVM60457", cif_number.get_Reference(), opt_flag.get_Reference(), branch_num.get_Reference(), teller_num.get_Reference(), out_cif_details.get_Reference(), out_account_array.get_Reference(),  out_error_num.get_Reference(), Rec_Area.get_Reference(),connection);
 	    		errno = out_error_num.getJvmOutErrorNo();
		 } catch (SQLException e) {
	     errno = "VC010";
			 errno = "3293";

		}
		 
			 cif_details = out_cif_details.getJvmOutCifDetails();
			index = 0;
			while (index <= 9999) {
				String account_details = out_account_array.getJvmOutput60457Output(index);
				if (!account_details.trim().isEmpty()) {
					Output_Acc = Output_Acc + account_details;
					index+=1;
				}
				else {
					break;
				}
			}
			  run1.close();
			  System.out.println("RunUnit closed successfully.");
		        run1 = null;
		        long memoryAfter = runtime.totalMemory() - runtime.freeMemory();
		        System.out.println("Memory After RunUnit Execution: " + memoryAfter + " bytes");

		        if (memoryAfter > memoryBefore) {
		            System.out.println("Possible Memory Leak Detected");
		        } else {
		            System.out.println(" Memory Released Successfully.");
		        }
		    
			List<String> res = new ArrayList<>();
			res.add(cif_details);
			if (!Output_Acc.isEmpty()) {
				res.add(Output_Acc.substring(0, Output_Acc.length() - 317));
			}
			else {
				res.add(Output_Acc);
			}
			
			res.add(String.valueOf(index-1));
			res.add(errno);
			
			return res;
	}
	}




-----------------------------------


public class YONO_Child {
	
	Logger logger = LoggerFactory.getLogger(YONO_Child.class);
	   Connection connection;

	public List<String> callYONOEnquiryChild(String branch_number,  String tellerno, String cifno, String option_flag, DataSource datasource, String commonArea) throws InterruptedException, ExecutionException {
		int index;
		String Output_Acc = "";
		String cif_details;
		String errno;
		   JVM60457 jvm60457 = new JVM60457();
		
		logger.info("VC------------------------YONO Enquiry Child Service Started------------------------VC");
		
		JvmIn60457CifNo     cif_number        = new JvmIn60457CifNo();
		JvmIn60457OptnFlag  opt_flag          = new JvmIn60457OptnFlag();
		JvmInBranchNo       branch_num        = new JvmInBranchNo();
		JvmInTellerNo       teller_num        = new JvmInTellerNo();
		LsRecordArea 		Rec_Area          = new LsRecordArea();
		JvmOutCifDetails    out_cif_details   = new JvmOutCifDetails();
		JvmArrayOutputOut   out_account_array = new JvmArrayOutputOut();
		JvmOutErrorNo       out_error_num     = new JvmOutErrorNo();
         

		
		teller_num.setJvmInTellerNo(String.format("%016d", new BigInteger(tellerno)));
		cif_number.setJvmIn60457CifNo(String.format("%017d", new BigInteger(cifno)));
		opt_flag.setJvmIn60457OptnFlag(option_flag);
		branch_num.setJvmInBranchNo(branch_number);
		Rec_Area.setLsRecordArea(commonArea);
		 RunUnit run1 = new RunUnit();
		 RunUnit run2 = new RunUnit();
		 System.out.println("RunUnit Created: " + run1);  // Print RunUnit reference
		
        Runtime runtime = Runtime.getRuntime();
	        long memoryBefore = runtime.totalMemory() - runtime.freeMemory();
	        System.out.println("Memory Before RunUnit Execution: " + memoryBefore + " bytes");
	        //Changed
		 try (Connection connection = datasource.getConnection()){
			
	            run1.Add(jvm60457);
	            //Changed
	            System.out.println("COBOL program added to RunUnit.");
	            //Changed
 	    		run1.Call("JVM60457", cif_number.get_Reference(), opt_flag.get_Reference(), branch_num.get_Reference(), teller_num.get_Reference(), out_cif_details.get_Reference(), out_account_array.get_Reference(),  out_error_num.get_Reference(), Rec_Area.get_Reference(),connection);
 	    		errno = out_error_num.getJvmOutErrorNo();
		 } catch (SQLException e) {
			 errno = "3293";
		}
		 
			 cif_details = out_cif_details.getJvmOutCifDetails();
			index = 0;
			while (index <= 9999) {
				String account_details = out_account_array.getJvmOutput60457Output(index);
				if (!account_details.trim().isEmpty()) {
					Output_Acc = Output_Acc + account_details;
					index+=1;
				}
				else {
					break;
				}
			}
			  run1.close();
			  System.out.println("RunUnit closed successfully.");
		      run1=run2;	       
		        long memoryAfter = runtime.totalMemory() - runtime.freeMemory();
		        System.out.println("Memory After Execution: " + memoryAfter + " bytes");

		        if (memoryAfter > memoryBefore) {
		            System.out.println("Possible Memory Leak Detected");
		        } else {
		            System.out.println("Memory Released Successfully.");
		        }
		    
			List<String> res = new ArrayList<>();
			res.add(cif_details);
			if (!Output_Acc.isEmpty()) {
				res.add(Output_Acc.substring(0, Output_Acc.length() - 317));
			}
			else {
				res.add(Output_Acc);
			}
			
			res.add(String.valueOf(index-1));
			res.add(errno);
			
			return res;
	}
	}
	

