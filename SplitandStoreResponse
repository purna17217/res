
package com.bancs.microservices.java.response;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class SplitandStoreResponse {

    ProcessSubStructure pssobj = new ProcessSubStructure();

    public Map<String, Object> splitAndStoreResponse(String str, Map<String, String> paramLengthMap, String requestedNoOfRecords) {
        Map<String, Object> splitResponse = new LinkedHashMap<>();
        int curIndex = 0;
        int recordCount = 0;

        for (Map.Entry<String, String> entry : paramLengthMap.entrySet()) {
            String key = entry.getKey();

            int length = Integer.parseInt(entry.getValue());
            int repetitions = Integer.parseInt(requestedNoOfRecords);

            if (repetitions >= 1) {
                List<Map<String, Object>> repeatedItems = new ArrayList<>();
                for (int i = 0; i < repetitions; i++) {
                	if(str.substring(curIndex, curIndex + length).trim().equals("")) {
            		splitResponse.put(key, repeatedItems);
            		return splitResponse;
                }
                    if (recordCount >= repetitions) {
                        return splitResponse; // Stop if the record count is reached
                    }
                    if (curIndex + length <= str.length()) {
                        Map<String, Object> item = new LinkedHashMap<>();
                        pssobj.processSubStructure(str.substring(curIndex, curIndex + length), item, key, paramLengthMap);
                        repeatedItems.add(item);
                        curIndex += length;
                        recordCount++;
                    } else {
                        break; // In case remaining length is less than expected
                    }
                }
                splitResponse.put(key, repeatedItems);
                break;
            } 
        }

        return splitResponse;
    }
}
