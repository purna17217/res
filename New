import java.util.*;
import java.util.regex.Pattern;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.stream.Collectors;

public class ReferenceNumberValidator {
    private static final Logger logger = LoggerFactory.getLogger(ReferenceNumberValidator.class);

    private static final String INVALID_CODE = "1610";
    private static final String VALID_CODE = "00000";

    private Set<String> validSrc = new HashSet<>();

    public ReferenceNumberValidator() {
        String sourceAuth = CacheConfig.frameworkConfigProperties.getProperty(FrameworkConstants.LOOKUP_FILES_PATH);
        
        if (sourceAuth == null || sourceAuth.isEmpty()) {
            logger.error("LOOKUP_FILES_PATH is not set in framework properties.");
            return;
        }

        Properties sId = PropertyLoader.readPropertyFile(sourceAuth + "/SourceIdList.properties");

        String sourceFlag = sId.getProperty("SourceFlag", "").trim();

        if (!sourceFlag.isEmpty()) {
            validSrc = Arrays.stream(sourceFlag.split(","))
                             .map(String::trim)
                             .collect(Collectors.toSet());
        }
    }

    public List<String> validateRefNum(String refnum) {
        List<String> resList = new ArrayList<>();
        String res;

        if (refnum == null) {
            res = INVALID_CODE;
            resList.add("");
            resList.add(res);
            logger.error("Received Reference number is null");
            return resList;
        }

        if (refnum.length() != 25 || refnum.contains(" ") || refnum.isEmpty()) {
            res = INVALID_CODE;
            resList.add(refnum);
            resList.add(res);
            logger.error("Received Reference number is of invalid length");
            return resList;
        }

        // Ensure that refnum has at least 5 characters before extracting substrings
        if (refnum.length() < 5) {
            res = INVALID_CODE;
            resList.add(refnum);
            resList.add(res);
            logger.error("Received Reference number is too short");
            return resList;
        }

        String sbi = refnum.substring(0, 3);
        String srcId = refnum.substring(3, 5);
        String s = refnum.substring(0, 5);
        String num = refnum.substring(5);

        if (Pattern.matches("^(?![0-9]*$)[a-zA-Z0-9]+$", refnum) &&
            sbi.equalsIgnoreCase("SBI") &&
            StringUtils.isAlpha(s) &&
            StringUtils.isAlphanumeric(num)) {
            
            if (!validSrc.contains(srcId)) {
                res = INVALID_CODE;
                resList.add(refnum);
                resList.add(res);
                logger.error("VC------------------------Invalid Source ID '{}'------------------------VC", srcId);
            } else {
                res = VALID_CODE;
                resList.add(refnum);
                resList.add(res);
                logger.info("VC------------------------Received Reference number is valid------------------------VC");
            }
        } else {
            res = INVALID_CODE;
            resList.add(refnum);
            resList.add(res);
            logger.error("Received Reference number is of invalid format");
        }

        return resList;
    }
}
